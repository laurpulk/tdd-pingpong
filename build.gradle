buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE'
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.8.1'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'tdd-pingpong'
    version =  '0.1.0'
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // tag::jetty[]
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile 'org.springframework.boot:spring-boot-starter-jetty'
    // end::jetty[]
    // tag::actuator[]
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    // end::actuator[]
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-devtools'

    //Spring Messaging
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.webjars:webjars-locator")
    compile("org.webjars:sockjs-client:1.0.2")
    compile("org.webjars:stomp-websocket:2.3.3")

    //Spring Security
    compile 'io.projectreactor:reactor-core:3.0.7.RELEASE'
    compile 'org.springframework.security:spring-security-core:5.0.0.M3'
    compile 'org.springframework.security:spring-security-web:5.0.0.M3'
    compile 'org.springframework.security:spring-security-config:5.0.0.M3'
    compile 'org.springframework.security:spring-security-oauth2-core:5.0.0.M3'
    compile 'org.springframework.security:spring-security-oauth2-client:5.0.0.M3'
    compile 'org.springframework.security:spring-security-messaging:5.0.0.M3'
    compile 'org.springframework.security:spring-security-test:5.0.0.M3'
    compile 'org.springframework.boot:spring-boot-starter-webflux:2.0.0.M2'
    compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE'

    compile 'com.h2database:h2'
    compile 'org.webjars:jquery:3.2.1'
    compile 'org.webjars:bootstrap:3.3.0'
    compile 'com.github.javaparser:javaparser-core:3.2.12'
    compile 'org.apache.commons:commons-compress:1.14'
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'org.json:json:20160212'

    // Ace editor
    compile 'org.webjars.bower:ace-builds:1.2.8'

    testCompile 'junit:junit'
    testCompile 'org.springframework.boot:spring-boot-starter-test'

    //Cucumber & Selenium
    testCompile 'info.cukes:cucumber-core:1.2.5'
    testCompile 'info.cukes:cucumber-java:1.2.5'
    testCompile 'info.cukes:cucumber-junit:1.2.5'
    testCompile 'info.cukes:cucumber-spring:1.2.5'
    testCompile 'org.seleniumhq.selenium:selenium-api:3.4.0'
    testCompile 'org.seleniumhq.selenium:selenium-server:3.4.0'
    testCompile 'org.seleniumhq.selenium:selenium-java:3.4.0'
    testCompile 'org.seleniumhq.selenium:selenium-remote-driver:3.4.0'
    testCompile 'org.seleniumhq.selenium:selenium-firefox-driver:3.4.0'
    testCompile 'org.seleniumhq.selenium:selenium-chrome-driver:3.4.0'
}

bootRun {
	systemProperties System.properties

    // Make static classpath resources reloadable when using bootRun
    addResources = true
}


// Separates the Unit and Cucumber tests to separate tasks
// Defines tasks unitTest, and cucumber and clears out the task test
apply from: 'gradle/helpers/test-tasks.gradle'

apply from: 'gradle/helpers/test-printing.gradle'

// Set the print function to be called after tests
unitTest { testLogging { afterSuite { desc, result -> printTestResults(desc,result,'UNIT') } } }

//Full debug prints for Travis, custom report prints for local
if(System.env.TRAVIS == 'true') {
  cucumber.testLogging.showStandardStreams = true
} else {
  cucumber { testLogging { afterSuite { desc, result -> printTestResults(desc,result,'CUKE') } } }
}
